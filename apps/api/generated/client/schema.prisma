generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String        @id
  email     String        @unique
  password  String
  name      String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  role      Role          @default(USER)
  Order     Transaction[]
}

model Brand {
  id        String   @id
  name      String   @unique
  models    Model[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Model {
  id        String    @id
  brandId   String
  brand     Brand     @relation(fields: [brandId], references: [id])
  name      String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id                   String            @id
  modelId              String
  model                Model             @relation(fields: [modelId], references: [id])
  sku                  String            @unique
  slug                 String            @unique
  name                 String
  description          String
  price                Decimal           @db.Decimal(10, 2)
  discount             Int?
  minimumOrderQuantity Int
  batteryHealth        Int?
  display              String?
  processor            String?
  camera               String?
  battery              String?
  os                   String?
  connectivity         String?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  galleries            Gallery[]
  transactionItems     TransactionItem[]
  variants             ProductVariant[]
}

model ProductVariant {
  id             String   @id
  productId      String
  product        Product  @relation(fields: [productId], references: [id])
  storage        String?
  ram            String?
  color          String?
  condition      String?
  price          Decimal  @db.Decimal(10, 2)
  stockQuantity  Int
  warrantyMonths Int?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Gallery {
  id        String   @id
  imageUrl  String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id                String            @id
  userId            String
  status            TransactionStatus @default(PENDING)
  totalPrice        Decimal?          @db.Decimal(10, 2)
  shippingAddressId String?
  shippingMethod    String
  paymentMethod     String
  orderReference    String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  payments          Payment[]
  shippingAddress   ShippingAddress?
  user              User              @relation(fields: [userId], references: [id])
  items             TransactionItem[]
}

model TransactionItem {
  id            String      @id
  transactionId String
  productId     String
  price         Decimal     @db.Decimal(10, 2)
  quantity      Int
  storage       String?
  condition     String?
  product       Product     @relation(fields: [productId], references: [id])
  transaction   Transaction @relation(fields: [transactionId], references: [id])
}

model ShippingAddress {
  id            String      @id
  transactionId String      @unique
  fullName      String
  addressLine   String
  city          String
  state         String
  postalCode    String
  email         String
  country       String
  phoneNumber   String
  transaction   Transaction @relation(fields: [transactionId], references: [id])
}

model Payment {
  id               String        @id
  transactionId    String
  paymentMethod    String
  paymentStatus    PaymentStatus @default(PENDING)
  paymentReference String?
  paidAt           DateTime?
  transaction      Transaction   @relation(fields: [transactionId], references: [id])
}

enum TransactionStatus {
  PENDING
  PAID
  APPROVED
  REJECTED
  SHIPPED
  DELIVERED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  EXPIRED
}

enum Role {
  ADMIN
  USER
}
